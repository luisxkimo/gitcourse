.GITIGNORE

git add -f -> fuerzas a añadirlo aunque en el gitignore ponga que lo ignora


.git

- Nuestro repositorio local de git
- hooks
	- Scripts que agregamos para cosas por ejemplo: cuando hagas un pull, hazme un fetch. O si hago checkout de una rama remota que no tengo en loca, primero creamela en local

.git/object/pack -> el tamaño del arhivo .pack nos dice el tamaño de nuestro repositorio

.git/object  -> carpetas de cache que va creando cada vez que navegamos por el arbol del repositorio

.gitattributes
	- Donde los plugins de git guardan referencias y configuraciones

.gitmodules
	- Indica si tenemos submodulos en nuestro repositorio
	- Son enlaces a otro repositorio

	
POLITICAS DE RAMAS

2 ramas troncales:
	- develop: sobre la que vamos desarrollando nuevas features
	- master: app completa desplegada y terminada
	
Nuevas features?
	- Sacamos rama de develop
	- la terminamos y la devolvemos a develop

Cuando tenemos suficiente funcionalidad para sacar version nueva?
	- Sacamos rama de develop con nombre "release xxx"
	- Se trabaja en esa rama con QA para refinar
	- Despues de refinar del todo, se mergea a master y se taguea
	
	- Normalment lo que vamos integrando a master y tagueando nuevo, se va deployando a PRE
	- Despues cuando este probado en PRE, podemos hacer un swap de los entornos

Bugs en PROD?

	- Sacamos rama de master para el hotfix
	- se resuelve y se integra a master y se taguea
	- Se integra en develop
	- Se deploya en PRE
	
PULL REQUEST

Dev local -> creamos rama para feature1 -> Terminamos y hacemos push de la rama a remoto. NO INTEGRAMOS A DEV LOCAL
	- Esto desencadena un pull request para revisar esta rama.
	- Despues SI ES ACEPTADA, podemos luego hacer un fetech y ya integramos en dev local
	
CONFLICTO EN MERGE PULL REQUEST

	- Fetch en master local
	- Cambiar a la rama de nuestr feature1
	- rebase para resolver los conflictos y continue
	- amend para poner nuevo titulo
	- git push origin Rama -f
	
	
ESTADOS CRITICOS

	- Eliminar commit merge: no se puede hacer con revert, hace falta rebase

SUBMODULOS

	- para hacer fetch desde el padre si queremos actualizar el modulo, tenemos que cambiarnos a la carpeta del submodulo dentro del padre y hacer fetch
	- Para actualizar un proyecto separado, el codigo de su submodulo
		1 - Primero fetch del padre, normal
		2- Luego: git submodules update
	- git clone --recurse-submodules : para ir bajandose el repositorio y todos sus submodulos
	
GIT LFS

	- Servidor para almacenamiento de ficheros binarios
	- Lo que tenemos en nuestro repositorio de git es un enlace al LFS. No una copia de este

	1- git lfs install
	2- git lfs track '*.png'
	3- git add .gitattributes
	4- ya podemos ver con git lfs status que arhchivos van a git y cuales a LFS
	